#!/usr/bin/env python3

# Filter sequence file by some arbitrary parameter.

# Example

# Filter any reads less than 50nt in input.fastq and save to output.fastq
#
# bin/seq-filter --input input.fastq --output output.fastq --format fastq --param 'len(r) > 50'
#

import argparse
from Bio import SeqIO
import re


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--input", default="/dev/stdin")
    parser.add_argument("--format", default="fasta")
    parser.add_argument("--output", default="/dev/stdout")
    parser.add_argument("--param", default=True, type=str)
    parser.add_argument(
        "--skip-fail",
        help="do not print record if an exception is raised",
        default=False,
        action="store_true",
    )

    return parser.parse_args()


def main():

    args = parse_args()

    with open(args.input) as handle:
        records = SeqIO.parse(handle, args.format)

        out_handle = open(args.output, "w")

        for n, r in enumerate(records):
            print_record = False

            try:
                print_record = eval(args.param)
            except Exception as e:
                if args.skip_fail:
                    continue
                else:
                    raise e

            if print_record:
                out_handle.write(r.format(args.format))

        out_handle.close()


if __name__ == "__main__":
    main()
