#!/usr/bin/env python

# (thrifted from: https://www.biostars.org/p/83058/)

import argparse
import logging
from Bio import SeqIO


def parse_args():
    """
    return arguments
    >>> args = parse_args()

    """

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--log", default="/dev/stderr", help="log file (default=stderr)"
    )
    parser.add_argument("--output", default="/dev/stdout")
    parser.add_argument("--input", default="/dev/stdin")
    parser.add_argument("--molecule", default="nucl", help="nucl or prot")
    parser.add_argument("--name", default=None)
    parser.add_argument("--type", default="CDS")
    return parser.parse_args()


def main():
    """
        >>> main() # stuff happens
    """

    args = parse_args()
    logging.basicConfig(filename=args.log, level=logging.INFO)

    if args.name is not None:
        logging.info("prepending {} to sequence IDs".format(args.name))
        prefix = "{}_".format(args.name)
    else:
        prefix = ""

    logging.info("writing features as {}".format(args.molecule))

    with open(args.input) as handle, open(args.output, "w") as output:
        for record in SeqIO.parse(handle, "genbank"):
            for feature in record.features:
                if feature.type == args.type:
                    feature.id = "{}{}".format(prefix, feature.id)
                    if args.molecule == "nucl":
                        seq = str(feature.extract(record).seq)
                    elif args.molecule == "prot":
                        seq = str(feature.qualifiers["translation"][0])

                    output.write(
                        ">{} {}\n{}\n".format(
                            feature.qualifiers["locus_tag"][0],
                            feature.qualifiers["product"][0],
                            seq,
                        )
                    )


if __name__ == "__main__":
    main()
